clear cache command

npm start -- --reset-cache

------------------------------------------------------


Reusable Components


1.Button

import React from "react";
import { View, Text, TouchableOpacity,StyleSheet } from "react-native";

const Button = ({ label,style }) => {
    return (
        
            <TouchableOpacity style={[styles.buttonStyle,style]}>
                <Text>
                    {label}
                </Text>
            </TouchableOpacity>

       
    )
}

const styles = StyleSheet.create({
    buttonStyle: {
        height: 50, borderRadius: 20,
        backgroundColor: "coral",
        alignSelf: "center",
        width: "90%",
        justifyContent: "center",
        alignItems: "center"
    }
})

export default Button;
 
2.   radio Button
3. import React, { useEffect, useState } from "react";
import { View, Text, TouchableOpacity, Alert, ScrollView, StyleSheet, Dimensions, Button } from "react-native";
import SelectDropdown from 'react-native-select-dropdown'
const { width } = Dimensions.get('window');
import axios from 'axios';
import { SelectList } from 'react-native-dropdown-select-list'
import { showMessage, hideMessage} from "react-native-flash-message";
import FlashMessage from "react-native-flash-message";


const App = () => {

    const [checked, setChecked] = useState(0)

    const [state, setState] = useState([])
    const [selected, setSelected] = React.useState("");

    const arr = ["Item1","Item2","Item3","Item4"]

    // useEffect(() => {
    //     getAdvice()

    // }, [])

    // const getAdvice = () => {
    //     axios.get('https://sellerapi.ypay.tech/bindstate')
    //         .then((response) => {
    //             console.log(response.data)
    //             setState(response.data)

    //         });

    // };

    return (
        <View style={{ flex: 1, backgroundColor: "#ffffff", alignItems: "center", justifyContent:"center" }}>

            {
                arr.map((item, key) => {
                    return (
                        <View key={key}>

                            {
                                checked == key ?

                                    <View sty>
                                        <TouchableOpacity style={{ height: 36, width: 36, margin: 20, borderWidth: 2, borderRadius: 18, alignItems: "center", flexDirection: "row", justifyContent: "center" }}>

                                            <View style={{ height: 24, width: 24, borderWidth: 2, borderRadius: 12, backgroundColor: "black" }}>

                                            </View>
                                        </TouchableOpacity>

                                        
                                    </View>
                                    :
                                    <TouchableOpacity onPress={() => setChecked(key)} style={{ height: 36, margin: 20, width: 36, borderWidth: 2, borderRadius: 18, flexDirection: "row" }}>

                                    </TouchableOpacity>
                            }

                        </View>

                    )
                })
            }



        </View >
    )
}

export default App;

const styles = StyleSheet.create({
    shadow: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 6 },
        shadowOpacity: 0.1,
        shadowRadius: 10,
        elevation: 10,
    },
    header: {
        flexDirection: 'row',
        width,
        height: 50,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#F6F6F6',
    },
    headerTitle: { color: '#000', fontWeight: 'bold', fontSize: 16 },
    saveAreaViewContainer: { flex: 1, backgroundColor: '#FFF' },
    viewContainer: { flex: 1, width, backgroundColor: '#FFF' },
    scrollViewContainer: {
        flexGrow: 1,
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: '10%',
        paddingBottom: '20%',
    },

    dropdown1BtnStyle: {
        width: '80%',
        height: 50,
        backgroundColor: '#FFF',
        borderRadius: 8,
        borderWidth: 1,
        borderColor: '#444',
    },
    dropdown1BtnTxtStyle: { color: '#444', textAlign: 'left' },
    dropdown1DropdownStyle: { backgroundColor: '#EFEFEF' },
    dropdown1RowStyle: { backgroundColor: '#EFEFEF', borderBottomColor: '#C5C5C5' },
    dropdown1RowTxtStyle: { color: '#444', textAlign: 'left' },
    dropdown1SelectedRowStyle: { backgroundColor: 'rgba(0,0,0,0.1)' },
    dropdown1searchInputStyleStyle: {
        backgroundColor: '#EFEFEF',
        borderRadius: 8,
        borderBottomWidth: 1,
        borderBottomColor: '#444',
    },

    dropdown2BtnStyle: {
        width: '80%',
        height: 50,
        backgroundColor: '#444',
        borderRadius: 8,
    },
    dropdown2BtnTxtStyle: {
        color: '#FFF',
        textAlign: 'center',
        fontWeight: 'bold',
    },
    dropdown2DropdownStyle: {
        backgroundColor: '#444',
        borderRadius: 12,
    },
    dropdown2RowStyle: { backgroundColor: '#444', borderBottomColor: '#C5C5C5' },
    dropdown2RowTxtStyle: {
        color: '#FFF',
        textAlign: 'center',
        fontWeight: 'bold',
    },
    dropdown2SelectedRowStyle: { backgroundColor: 'rgba(255,255,255,0.2)' },
    dropdown2searchInputStyleStyle: {
        backgroundColor: '#444',
        borderBottomWidth: 1,
        borderBottomColor: '#FFF',
    },

    dropdown3BtnStyle: {
        width: '80%',
        height: 50,
        backgroundColor: '#FFF',
        paddingHorizontal: 0,
        borderWidth: 1,
        borderRadius: 8,
        borderColor: '#444',
    },
    dropdown3BtnChildStyle: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingHorizontal: 18,
    },
    dropdown3BtnImage: { width: 45, height: 45, resizeMode: 'cover' },
    dropdown3BtnTxt: {
        color: '#444',
        textAlign: 'center',
        fontWeight: 'bold',
        fontSize: 24,
        marginHorizontal: 12,
    },
    dropdown3DropdownStyle: { backgroundColor: 'slategray' },
    dropdown3RowStyle: {
        backgroundColor: 'slategray',
        borderBottomColor: '#444',
        height: 50,
    },
    dropdown3RowChildStyle: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center',
        paddingHorizontal: 18,
    },
    dropdownRowImage: { width: 45, height: 45, resizeMode: 'cover' },
    dropdown3RowTxt: {
        color: '#F1F1F1',
        textAlign: 'center',
        fontWeight: 'bold',
        fontSize: 24,
        marginHorizontal: 12,
    },
    dropdown3searchInputStyleStyle: {
        backgroundColor: 'slategray',
        borderBottomWidth: 1,
        borderBottomColor: '#FFF',
    },
});



3. Back Button handling

useEffect(() => {
        const backAction = () => {
            Alert.alert("Hold on!", "Are you sure you want to go back?", [
                {
                    text: "Cancel",
                    onPress: () => null,
                    style: "cancel"
                },
                { text: "YES", onPress: () => BackHandler.exitApp() }
            ]);
            return true;
        };

        const backHandler = BackHandler.addEventListener("hardwareBackPress",backAction);

        return () => backHandler.remove();
    }, []);

4. Top Tab BAr
5. import { createMaterialTopTabNavigator } from "@react-navigation/material-top-tabs";
import React from "react";
import { BookInfo } from "../Components/BookInfo";
import { Screen1 } from "../Screens/TopTabScreens/Screen1";
import { Screen2 } from "../Screens/TopTabScreens/Screen2";
import Feed from '../Screens/Feed'
import { Article } from "../Screens/Article";

const Tab = createMaterialTopTabNavigator();

export const TopTab = () => {

    return (
        <>
            <BookInfo />
            <Tab.Navigator
            screenOptions={{
                tabBarStyle: { backgroundColor: '#fff800',elevation:0,borderTopWidth:0 },
                tabBarScrollEnabled:true,
                tabBarPressOpacity:1,
                tabBarPressColor:"#fff800",
                tabBarIndicator:false,
                tabBarIndicatorStyle:{height:0,width:0}
            }}
            style={{
                backgroundColor:"#fff800",
                paddingRight:100,
                borderColor:"red"

            }}
          
            >
                <Tab.Screen name="Home" component={Screen1} />
                <Tab.Screen name="Profile" component={Screen2} />
                <Tab.Screen name="Screen 3" component={Article} />
            </Tab.Navigator>
        </>
    );
}

--------------------------------------------------------------------------------------------------------



navigation.reset({
  index: 0,
  routes: [{ name: "SCREEN WHERE THE GOBACK BUTTON SHOULD GO" }],
});

  useEffect(() => {
        console.log(navigation.getState())
        //navigation.dispatch(backAction)

    },[])

// component will mount and unmont together

import React, { useEffect } from 'react';
const ComponentExample => () => {
    useEffect(() => {
        // Anything in here is fired on component mount.
        return () => {
            // Anything in here is fired on component unmount.
        }
    }, [])
}

------------------------------------------------------------------------

Seach Code

<TextInput onChangeText={(text) => searchData(text)} value={input} />
***Please Note *searchData is my function whom I passing a text prop*** 
const searchData = (text) => {
    const newData = restaurantsData.filter((item) => {
        return item.title.search(text) > -1;
    });
    setRestaurantsData(newData);
    setInput(text);
};




____________________________________________________


Push Notification


/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow strict-local
 */

import React, { useEffect } from 'react';

import {
  SafeAreaView,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  useColorScheme,
  View,
} from 'react-native';
import PushNotification from "react-native-push-notification";
import Button from './src/utils/ReusableComponents/Button';
import messaging from '@react-native-firebase/messaging';
import { TouchableOpacity } from 'react-native-gesture-handler';


const App = () => {


  async function requestUserPermission() {
    const authStatus = await messaging().requestPermission();
    const enabled =
      authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
      authStatus === messaging.AuthorizationStatus.PROVISIONAL;

    if (enabled) {
      console.log('Authorization status:', authStatus);
    }
  }

  const getToken = async () => {
    await messaging().registerDeviceForRemoteMessages();
    const token = await messaging().getToken();

    console.log(token);
  };

  useEffect(() => {
    requestUserPermission();
    //getToken();
    channels();

  }, [])


  const channels = () => {
    PushNotification.createChannel({
      channelId: "test-channel",
      channelName: "Test Channel"
    })
  }

  const handleNotification = () => {
    console.log("hello")
    PushNotification.localNotification({
      channelId: "test-channel",
      title: "Cricbuzz",
      message: "Worlcup is about to start!!!!!"

    })
  }

  return (
    <View style={{ flex: 1 }}>

      <View>
       
        <Button
           action={() => handleNotification()}
          style={{ marginTop: 100 }}
          label={"Push Notification"}
          txtStyle={{ color: "black" }}
        />
      </View>

    </View>
  );
};

const styles = StyleSheet.create({
  sectionContainer: {
    marginTop: 32,
    paddingHorizontal: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '600',
  },
  sectionDescription: {
    marginTop: 8,
    fontSize: 18,
    fontWeight: '400',
  },
  highlight: {
    fontWeight: '700',
  },
});

export default App;


________________________________________________________________________



Node Modules Code Change

nodeModules/react-native/index.js

//line starts from 437
// Deprecated Prop Types
  get ColorPropType(): $FlowFixMe {
    //console.warn('');
    return require('deprecated-react-native-prop-types').ColorPropType;
  },
  get EdgeInsetsPropType(): $FlowFixMe {
    //console.warn('');
    return require('deprecated-react-native-prop-types').EdgeInsetsPropType;
  },
  get PointPropType(): $FlowFixMe {
    //console.warn('');
    return require('deprecated-react-native-prop-types').PointPropType;
  },
  get ViewPropTypes(): $FlowFixMe {
    //console.warn('');
    return require('deprecated-react-native-prop-types').ViewPropTypes;
  },



_______________________________________________________________________




Async Storage Code


import React, { useState } from "react";
import { View, Text, TouchableOpacity, Dimensions, TextInput } from "react-native";
import { Colors } from "../../Constants";
import AsyncStorage from "@react-native-async-storage/async-storage";

function Scan() {

    const { width } = Dimensions.get('screen')
    const [num, setNum] = useState("")
    const[storeValue,setStoreValue] = useState(' ')


    const setValue = async () => {

        try {
            await AsyncStorage.setItem('itemList',num);
            setNum("")
            
            await getValue();

            alert("Data is added")
        } catch (error) {
            console.log(error)
            // Error saving data
        }
    }

    const getValue = async() => {
        try{
            const data = await AsyncStorage.getItem('itemList');
            console.log(data);
            setStoreValue(data)

        }
        catch(error){
            console.log(error)
        }
    }


    return (
        <View style={{ flex: 1 }}>

            <TextInput
                value={num}
                onChangeText={(e) => setNum(e)}
                style={{
                    borderWidth: 2, borderColor: "red",
                    height: 40, width: width - 40, marginTop: 30, marginHorizontal: 20
                }}>
            </TextInput>

            <TouchableOpacity
            onPress={ () => setValue()}
             style={{ marginTop: 20, backgroundColor: "lime" }}>
                <Text> Press me</Text>

            </TouchableOpacity>

            <Text style={{fontSize:30,marginTop:30}}> Data is {storeValue}</Text>
        </View>
    )
}

export default Scan;




_____________________________________________________________________________




Animation Code

import { duration } from "moment";
import React from "react";
import { View, Text  , Animated} from "react-native";

function TransactionHistory() {

    const position = new Animated.ValueXY({ x: 0, y: 0 })
   
    Animated.timing(position, {
        toValue: { x: 200, y: 500 },
        bounciness:20,
        duration:2000,
        useNativeDriver: true
    }).start()

    const rotate = position.x.interpolate({
        inputRange:[0,10],
        outputRange:["0deg","90deg"]
    })

    return (
        <View style={{ flex: 1 }}>

            <Animated.View 
            style={{ height: 100, width: 100, backgroundColor: "green", borderRadius: 50,justifyContent:"center",alignItems:"center", alignItems: "center",transform:[
                {translateX:position.x},
                {translateY:position.y},
                {rotate:rotate}
            ] }}>
                <Text>Animation</Text>
            </Animated.View>
           
        </View>


    )
}
export default TransactionHistory;


































